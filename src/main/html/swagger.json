{
  "swagger": "2.0",
  "info": {
    "version": "0.0.1",
    "title": "Gathir API",
    "image": "https://gathir.com/images/g-logo.png",
    "contact": {
      "name": "Quinton Pike",
      "url": "https://gathir.com",
      "email": "qrpike@gathir.com"
    },
    "license": {
      "name": "Proprietary ( Copyright 2017 by Gathir, LLC )"
    }
  },
  "host": "api.gathir.com",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/x-www-form-urlencoded",
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "operationId": "register",
        "summary": "Register new Account",
        "description": "Create a new Gathir Account\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/authToken"
            }
          },
          "409": {
            "description": "Confict ( param was invalid )",
            "schema": {
              "$ref": "#/definitions/invalidArgument"
            }
          },
          "500": {
            "description": "Internal Error. Possibly duplicate entry in DB"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "login",
        "summary": "Login to Account",
        "description": "Login to users Gathir Account\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/authToken"
            }
          },
          "409": {
            "description": "Confict ( param was invalid )",
            "schema": {
              "$ref": "#/definitions/invalidArgument"
            }
          },
          "500": {
            "description": "Internal Error. Possible DB error"
          }
        }
      }
    },
    "/auth/account": {
      "get": {
        "operationId": "userDetails",
        "summary": "User Details",
        "description": "Get current users details\n",
        "parameters": [
          {
            "name": "key",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authentication Key"
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authentication Token"
          }
        ],
        "responses": {
          "200": {
            "description": "User Details",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/accounts/linked": {
      "get": {
        "operationId": "getLinkedAccounts",
        "summary": "Get Linked Accounts",
        "description": "Get all the social media accounts liked to this user\n",
        "parameters": [
          {
            "name": "key",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authentication Key"
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authentication Token"
          }
        ],
        "responses": {
          "200": {
            "description": "Social Accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            }
          }
        }
      }
    },
    "/accounts/public/ig": {
      "get": {
        "operationId": "getPublicProfiles",
        "summary": "Get Public Profiles",
        "description": "Get all the public profiles that are currently available to promote on\n",
        "responses": {
          "200": {
            "description": "List of accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            }
          }
        }
      }
    },
    "/accounts/ig-profile/{id}": {
      "get": {
        "operationId": "getIgAccount",
        "summary": "Get Your Instagram Account",
        "description": "Get the profile information of an account that you have registered. This gets you more infromation on your own account instead of using the public route.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "UUID of the social IG account"
          },
          {
            "name": "key",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authentication Key"
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authentication Token"
          }
        ],
        "responses": {
          "200": {
            "description": "Account Info",
            "schema": {
              "$ref": "#/definitions/account"
            }
          }
        }
      }
    },
    "/accounts/public/ig/{username}": {
      "get": {
        "operationId": "getPublicIgByUsername",
        "summary": "Get Public IG Account by Username",
        "description": "Get the account details of an account by using the username of the account rather than the UUID in the database.\n",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "username of the social IG account"
          }
        ],
        "responses": {
          "200": {
            "description": "Account Info",
            "schema": {
              "$ref": "#/definitions/account"
            }
          }
        }
      }
    },
    "/accounts/public/ig/id/{id}": {
      "get": {
        "operationId": "getPublicIgById",
        "summary": "Get Public IG Account by ID",
        "description": "Get the account details of an account by using the UUID in the database\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "UUID of the social IG account"
          }
        ],
        "responses": {
          "200": {
            "description": "Account Info",
            "schema": {
              "$ref": "#/definitions/account"
            }
          }
        }
      }
    },
    "/advertise/promos": {
      "get": {
        "operationId": "getAdvertiserPromos",
        "summary": "Get Advertiser Promos",
        "description": "Get all the promos for this account for \"advertising\". Meaning the promos they have paid to be promoted on someones account.\n",
        "parameters": [
          {
            "name": "key",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authentication Key"
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authentication Token"
          }
        ],
        "responses": {
          "200": {
            "description": "List of my advertiser promos",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/promo"
              }
            }
          }
        }
      }
    },
    "/promote/promos": {
      "get": {
        "operationId": "getPromoterPromos",
        "summary": "Get Promoter/Publisher Promos",
        "description": "Get all the promos for this account for \"publishing\". Meaning the promos this users accounts have been paid to promote.\n",
        "parameters": [
          {
            "name": "key",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authentication Key"
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authentication Token"
          }
        ],
        "responses": {
          "200": {
            "description": "List of my accounts with their promos",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "account": {
                    "$ref": "#/definitions/account"
                  },
                  "promos": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/promo"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "post": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "UUID of post in database"
        },
        "owner": {
          "$ref": "#/definitions/user"
        },
        "media": {
          "type": "array",
          "description": "Array of media objects",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "description": "Object key for S3 storage. ( Relative url )"
              },
              "name": {
                "type": "string",
                "description": "Generated name for this media"
              },
              "order": {
                "type": "number",
                "description": "Order in which this media should be in the post. Starting at 0"
              },
              "metadata": {
                "type": "object",
                "description": "Image inspection results from library",
                "properties": {
                  "filename": {
                    "type": "string",
                    "description": "Original file name"
                  },
                  "height": {
                    "type": "number",
                    "description": "Height of the media"
                  },
                  "width": {
                    "type": "number",
                    "description": "Width of the media"
                  },
                  "format": {
                    "type": "string",
                    "description": "Format of the media ( usually jpeg )"
                  }
                }
              }
            }
          }
        }
      }
    },
    "promo": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "UUID of promo in the database"
        },
        "owner": {
          "$ref": "#/definitions/user"
        },
        "publisher": {
          "$ref": "#/definitions/account"
        },
        "post": {
          "$ref": "#/definitions/post"
        },
        "schedule": {
          "type": "array",
          "description": "\"Times on when to post this promo. Currently only 1 timestamp is allowed.\"\n",
          "items": {
            "type": "string",
            "format": "date-time"
          }
        },
        "specialinstructions": {
          "type": "string",
          "description": "Special instructions left by the promo advertiser ( buyer )"
        },
        "content": {
          "type": "string",
          "description": "Content of the post. Actualy text to be posted."
        },
        "amount": {
          "type": "number",
          "description": "Amount this promo costed. whole numbers. eg: 15 = $15.00"
        },
        "status": {
          "type": "number",
          "description": "Status of the Promo",
          "enum": [
            "created",
            "paid",
            "approved",
            "denied",
            "screenshotted",
            "completed"
          ]
        },
        "created": {
          "type": "string",
          "description": "When this promo was created",
          "format": "date-time"
        }
      }
    },
    "account": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "UUID in the database"
        },
        "owner": {
          "$ref": "#/definitions/user"
        },
        "accountid": {
          "type": "string",
          "description": "Account ID in the JSON from the social account (instagram)"
        },
        "username": {
          "type": "string",
          "description": "Username of the accountid"
        },
        "picture": {
          "type": "string",
          "description": "URL of the accounts profile image"
        },
        "bio": {
          "type": "string",
          "description": "Description on this accounts page"
        },
        "category": {
          "type": "string",
          "description": "User defined category this account is best described as"
        },
        "audience": {
          "type": "string",
          "description": "User defined gender of the accounts followers"
        },
        "followers": {
          "type": "number",
          "description": "Number of followers this account has"
        },
        "following": {
          "type": "number",
          "description": "Number of accounts this user is following"
        },
        "isprivate": {
          "type": "boolean",
          "description": "If this is a public or private social account"
        },
        "posts": {
          "type": "number",
          "description": "Number of posts this social account has"
        },
        "postprice": {
          "type": "number",
          "description": "Price it costs to post for this account"
        },
        "lastcacheupdate": {
          "type": "string",
          "format": "date-time",
          "description": "\"Last time account stats were updated ( followers, following, posts, bio, picture, and lastcachemedia\"\n"
        },
        "lastcachemedia": {
          "type": "string",
          "description": "This is really an array of objects from instagram. TODO"
        },
        "verified": {
          "type": "boolean",
          "description": "If this account has had a verification message send, and verified"
        },
        "listed": {
          "type": "boolean",
          "description": "If this account should be listed in the profiles area"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "When this account was created"
        }
      }
    },
    "user": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "UUID in the database"
        },
        "photo": {
          "type": "string",
          "description": "url of this users photo"
        },
        "active": {
          "type": "boolean",
          "description": "If this users account is active"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "authToken": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Auth Key - used for future privilidged API calls"
        },
        "_id": {
          "type": "string",
          "description": "Auth token - used for future priviliged API calls"
        }
      }
    },
    "invalidArgument": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "error type"
        },
        "message": {
          "type": "string",
          "description": "Error message type formatted"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "scope": {
                "type": "string",
                "description": "Scope of the error"
              },
              "field": {
                "type": "string",
                "description": "Field name that was invalid"
              },
              "type": {
                "type": "string",
                "description": "Type of error",
                "enum": [
                  "MISSING",
                  "INVALID"
                ]
              },
              "reason": {
                "type": "string",
                "description": "Reason for the error"
              }
            }
          }
        }
      }
    }
  }
}